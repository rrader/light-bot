from datetime import datetime
from typing import List

from light_bot.api.yasno import YasnoScheduleResponse, PowerSlot, SlotType
from light_bot.config import TIMEZONE


class ScheduleFormatter:
    """Format Yasno power outage schedules for Telegram messages"""

    @staticmethod
    def minutes_to_time(minutes: int) -> str:
        """Convert minutes from midnight to HH:MM format"""
        hours = minutes // 60
        mins = minutes % 60
        return f"{hours:02d}:{mins:02d}"

    @staticmethod
    def get_outage_slots(slots: List[PowerSlot]) -> List[PowerSlot]:
        """Filter slots to get only Definite outages"""
        return [slot for slot in slots if slot.type == SlotType.DEFINITE]

    @staticmethod
    def format_outage_slots(slots: List[PowerSlot]) -> str:
        """Format outage slots into readable time ranges"""
        outage_slots = ScheduleFormatter.get_outage_slots(slots)

        if not outage_slots:
            return "‚úÖ –í—ñ–¥–∫–ª—é—á–µ–Ω—å –Ω–µ–º–∞—î"

        formatted = []
        for slot in outage_slots:
            start_str = ScheduleFormatter.minutes_to_time(slot.start)
            end_str = ScheduleFormatter.minutes_to_time(slot.end)
            formatted.append(f"‚ö°Ô∏è {start_str} - {end_str}")

        return "\n".join(formatted)

    @staticmethod
    def format_schedule_message(
        schedule_data: YasnoScheduleResponse,
        group: str,
        for_tomorrow: bool = False,
        change_detected: bool = False
    ) -> str:
        """Format complete schedule message for Telegram"""
        if not schedule_data:
            return "‚ùå –ì—Ä–∞—Ñ—ñ–∫ –≤—ñ–¥–∫–ª—é—á–µ–Ω—å –Ω–∞—Ä–∞–∑—ñ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π"

        emoji = "üîî" if change_detected else "üåô" if for_tomorrow else "‚òÄÔ∏è"
        day_label = "–∑–∞–≤—Ç—Ä–∞" if for_tomorrow else "—Å—å–æ–≥–æ–¥–Ω—ñ" if not change_detected else "–∑–º—ñ–Ω–∏–≤—Å—è"

        group_schedule = schedule_data.get_group(group)
        if not group_schedule:
            return f"‚ùå –ì—Ä—É–ø–∞ {group} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞ –≤ –≥—Ä–∞—Ñ—ñ–∫—É"

        day_schedule = group_schedule.tomorrow if for_tomorrow else group_schedule.today

        date_str = day_schedule.date.strftime('%d.%m.%Y')
        weekday_names = ['–ü–æ–Ω–µ–¥—ñ–ª–æ–∫', '–í—ñ–≤—Ç–æ—Ä–æ–∫', '–°–µ—Ä–µ–¥–∞', '–ß–µ—Ç–≤–µ—Ä', "–ü'—è—Ç–Ω–∏—Ü—è", '–°—É–±–æ—Ç–∞', '–ù–µ–¥—ñ–ª—è']
        weekday = weekday_names[day_schedule.date.weekday()]

        # Handle emergency shutdowns
        if day_schedule.status == "EmergencyShutdowns":
            message = (
                f"üö® <b>–ï–ö–°–¢–†–ï–ù–Ü –í–Ü–î–ö–õ–Æ–ß–ï–ù–ù–Ø</b> üö®\n\n"
                f"üè† –ì—Ä—É–ø–∞: <b>{group}</b>\n"
                f"üìÖ {weekday}, {date_str}\n\n"
                f"‚ö†Ô∏è <b>–ì—Ä–∞—Ñ—ñ–∫–∏ –Ω–µ –∑–∞—Å—Ç–æ—Å–æ–≤—É—é—Ç—å—Å—è</b>\n"
                f"–ï–∫—Å—Ç—Ä–µ–Ω—ñ –≤—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è —á–µ—Ä–µ–∑ –∞–≤–∞—Ä—ñ–π–Ω—ñ —Å–∏—Ç—É–∞—Ü—ñ—ó\n\n"
                f"üïê –û–Ω–æ–≤–ª–µ–Ω–æ: {datetime.now(TIMEZONE).strftime('%H:%M:%S')}"
            )
            return message

        outages_text = ScheduleFormatter.format_outage_slots(day_schedule.slots)

        status_msg = ""
        if day_schedule.status == "WaitingForSchedule":
            status_msg = "‚è≥ –û—á—ñ–∫—É–≤–∞–Ω–Ω—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –≥—Ä–∞—Ñ—ñ–∫—É\n\n"

        message = (
            f"{emoji} <b>–ì—Ä–∞—Ñ—ñ–∫ –≤—ñ–¥–∫–ª—é—á–µ–Ω—å {day_label.upper()}</b>\n\n"
            f"üè† –ì—Ä—É–ø–∞: <b>{group}</b>\n"
            f"üìÖ {weekday}, {date_str}\n\n"
            f"{status_msg}"
            f"<b>–ü–ª–∞–Ω–æ–≤—ñ –≤—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è:</b>\n"
            f"{outages_text}\n\n"
            f"üïê –û–Ω–æ–≤–ª–µ–Ω–æ: {datetime.now(TIMEZONE).strftime('%H:%M:%S')}"
        )

        return message
