from datetime import datetime
from typing import Optional


class PowerStatusFormatter:
    """Format power status messages for Telegram notifications"""

    @staticmethod
    def format_power_on_message(timestamp: datetime, duration_text: Optional[str] = None) -> str:
        """
        Format message for when power comes back on

        Args:
            timestamp: Current timestamp when power came on
            duration_text: Formatted duration text (e.g., "2 –≥–æ–¥–∏–Ω–∏ 15 —Ö–≤–∏–ª–∏–Ω")
        """
        kyiv_time = timestamp.strftime('%d.%m.%Y %H:%M:%S')

        message = (
            "‚ö°Ô∏è <b>–°–≤—ñ—Ç–ª–æ –∑'—è–≤–∏–ª–æ—Å—å!</b> ‚ö°Ô∏è\n\n"
            "‚úÖ –ï–ª–µ–∫—Ç—Ä–æ–ø–æ—Å—Ç–∞—á–∞–Ω–Ω—è –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–æ\n"
            f"üïê –ß–∞—Å: {kyiv_time}\n"
        )

        if duration_text:
            message += f"‚è± –í—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è —Ç—Ä–∏–≤–∞–ª–æ: <b>{duration_text}</b>\n"

        message += "\nüè† –ú–æ–∂–Ω–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ç–∏—Å—å –ø–æ–±—É—Ç–æ–≤–∏–º–∏ –ø—Ä–∏–ª–∞–¥–∞–º–∏"

        return message

    @staticmethod
    def format_power_off_message(timestamp: datetime, duration_text: Optional[str] = None) -> str:
        """
        Format message for when power goes out

        Args:
            timestamp: Current timestamp when power went out
            duration_text: Formatted duration text (e.g., "45 —Ö–≤–∏–ª–∏–Ω")
        """
        kyiv_time = timestamp.strftime('%d.%m.%Y %H:%M:%S')

        message = (
            "üî¥ <b>–°–≤—ñ—Ç–ª–æ –∑–Ω–∏–∫–ª–æ</b> üî¥\n\n"
            "‚ùå –ï–ª–µ–∫—Ç—Ä–æ–ø–æ—Å—Ç–∞—á–∞–Ω–Ω—è –≤—ñ–¥—Å—É—Ç–Ω—î\n"
            f"üïê –ß–∞—Å: {kyiv_time}\n"
        )

        if duration_text:
            message += f"‚è± –°–≤—ñ—Ç–ª–æ –±—É–ª–æ: <b>{duration_text}</b>"

        return message
